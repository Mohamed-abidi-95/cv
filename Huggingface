logs/
    application.log
output/
    cv.pdf
    cv_1742242699632.pdf
    cv_1742242805401.pdf
    cv_1742242821881.pdf
    cv_1742248241882.pdf
    cv_1742250029090.pdf
src/
    main/
        java/
            com/
                example/
                    stage/
                        ai/
                            AIPromptBuilder.java          # Builds prompts for AI models (e.g., Hugging Face)
                            AIResponseParser.java         # Parses AI responses into structured data
                        client/
                            HuggingFaceClient.java        # Client to interact with Hugging Face API
                        config/
                            HuggingFaceConfig.java        # Configuration for Hugging Face API (API key, URL, model)
                            ProfileConfigurations.java    # Configurations for different CV profiles (e.g., engineering, business)
                        controller/
                            Page1Controller.java          # Controller for the first page of the CV generator
                            Page2Controller.java          # Controller for the second page of the CV generator
                            WelcomeController.java        # Controller for the welcome screen
                        model/
                            Certificate.java              # Represents a certification in the CV
                            CV.java                       # Main CV model containing all CV data
                            CVAnalysis.java               # Stores AI-generated analysis of the CV
                            CVRecommendation.java         # Stores AI-generated recommendations for the CV
                            Education.java                # Represents education details in the CV
                            Language.java                 # Represents language proficiency in the CV
                            Project.java                  # Represents a project in the CV
                            Skill.java                    # Represents a skill in the CV
                            WorkExperience.java           # Represents work experience in the CV
                        service/
                            AIRecommendationService.java  # Service to generate AI-based CV recommendations
                            CVImprovementService.java     # Service to provide suggestions for improving the CV
                            PDFGenerationService.java     # Service to generate PDFs from CV data
                            UserService.java              # Service to manage user-related data
                        util/
                            ResourceManager.java          # Manages resources like translations and configurations
                            TranslationService.java       # Handles translation of CV content into multiple languages
                        validation/
                            CVDataValidator.java          # Validates CV data to ensure it meets requirements
                        CVBuilder.java                    # Main application class to launch the CV generator
        resources/
            com/
                example/
                    stage/
                        i18n/
                            messages_ar.properties        # Arabic translations for the UI
                            messages_de.properties        # German translations for the UI
                            messages_en.properties        # English translations for the UI
                            messages_fr.properties        # French translations for the UI
                        styles/
                            main.css                      # CSS styles for the application
                        page1.fxml                        # FXML file for the first page of the CV generator
                        page2.fxml                        # FXML file for the second page of the CV generator
                        welcome.fxml                      # FXML file for the welcome screen
            images/
                esprit-removebg-preview.png               # ESPRIT logo
                esprim.png                                # ESPRIM logo
                espritesb.png                             # ESPRIT School of Business logo
                gear.png                                  # Loading gear icon
                logo.png                                  # Application logo
                tunisie-removebg-preview.png              # Tunisia coat of arms
            application.properties                        # Application configuration properties
            logback.xml                                   # Logging configuration
    output/
        cv.pdf                                            # Generated CV PDFs
pom.xml                                                   # Maven build configuration
README.md                                                 # Project documentation

- HuggingFaceConfig.java: Configuration file for HuggingFace integration.
- HuggingFaceClient.java: Client implementation for interacting with HuggingFace APIs.
- AIRecommendationService.java: Service for AI-based recommendations.
- AIResponseParser.java: Parser for AI response data.
- CVAnalysis.java: Analysis module for CV data.
- page1.fxml: Defines the layout and structure of the first page of the UI.
- page2.fxml: Defines the layout and structure of the second page of the UI.
- messages_ar.properties: Resource bundle file for Arabic translations.
- messages_de.properties: Resource bundle file for German translations.
- messages_en.properties: Resource bundle file for English translations.
- messages_fr.properties: Resource bundle file for French translations.
- CVRecommendation.java: Class for CV recommendations.
Fichier: src\main\java\com\example\stage\config\HuggingFaceConfig.java
Chemin complet: C:\Users\Sh-Pc\Desktop\HomeFORNOW\KHEDMA\src\main\java\com\example\stage\config\HuggingFaceConfig.java
-----
package com.example.stage.config;

public class HuggingFaceConfig {
    private static final HuggingFaceConfig instance = new HuggingFaceConfig();

    private String apiKey = "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";
    private String apiUrl = "https://api-inference.huggingface.co/models/";
    private String modelId = "gpt2";

    // Private constructor to prevent instantiation
    private HuggingFaceConfig() {}

    // Static method to get the instance
    public static HuggingFaceConfig getInstance() {
        return instance;
    }

    public String getApiKey() {
        return apiKey;
    }

    public void setApiKey(String apiKey) {
        if (apiKey != null && !apiKey.trim().isEmpty()) {
            this.apiKey = apiKey.trim();
        }
    }

    public String getApiUrl() {
        return apiUrl;
    }

    public void setApiUrl(String apiUrl) {
        if (apiUrl != null && !apiUrl.trim().isEmpty()) {
            this.apiUrl = apiUrl.trim();
        }
    }

    public String getModelId() {
        return modelId;
    }

    public void setModelId(String modelId) {
        if (modelId != null && !modelId.trim().isEmpty()) {
            this.modelId = modelId;
        }
    }

    // Helper method to get the complete API URL
    public String getCompleteApiUrl() {
        return apiUrl + modelId;
    }

    // Optional: Method to load configuration from a properties file
    public void loadConfig(String propertiesPath) {
        try {
            java.util.Properties props = new java.util.Properties();
            props.load(getClass().getClassLoader().getResourceAsStream(propertiesPath));

            setApiKey(props.getProperty("huggingface.api-key", apiKey));
            setApiUrl(props.getProperty("huggingface.api-url", apiUrl));
            setModelId(props.getProperty("huggingface.model-id", modelId));
        } catch (Exception e) {
            // Log error but use default values
            System.err.println("Failed to load HuggingFace configuration: " + e.getMessage());
        }
    }

    // Optional: Reset to default values
    public void resetToDefaults() {
        apiKey = "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";
        apiUrl = "https://api-inference.huggingface.co/models/";
        modelId = "gpt2";
    }
}
==================================================

Fichier: src\main\java\com\example\stage\client\HuggingFaceClient.java
Chemin complet: C:\Users\Sh-Pc\Desktop\HomeFORNOW\KHEDMA\src\main\java\com\example\stage\client\HuggingFaceClient.java
-----
package com.example.stage.client;

import com.example.stage.config.HuggingFaceConfig;
import okhttp3.*;
import java.io.IOException;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class HuggingFaceClient {
    private static final Logger logger = LoggerFactory.getLogger(HuggingFaceClient.class);
    private final OkHttpClient client;
    private final HuggingFaceConfig config;
    private static final MediaType JSON = MediaType.get("application/json; charset=utf-8");

    public HuggingFaceClient(HuggingFaceConfig config) {
        this.client = new OkHttpClient.Builder()
                .build();
        this.config = config;
    }

    public String generateText(String prompt) throws IOException {
        try {
            RequestBody body = RequestBody.create(
                    String.format("{\"inputs\":\"%s\"}", prompt.replace("\"", "\\\"")),
                    JSON
            );

            Request request = new Request.Builder()
                    .url(config.getApiUrl() + config.getModelId())
                    .post(body)
                    .addHeader("Authorization", "Bearer " + config.getApiKey())
                    .build();

            try (Response response = client.newCall(request).execute()) {
                if (!response.isSuccessful()) {
                    logger.error("API call failed with code: {}", response.code());
                    throw new IOException("Unexpected code " + response);
                }
                return response.body().string();
            }
        } catch (Exception e) {
            logger.error("Error generating text: {}", e.getMessage());
            throw new IOException("Failed to generate text", e);
        }
    }
}
==================================================

Fichier: src\main\java\com\example\stage\service\AIRecommendationService.java
Chemin complet: C:\Users\Sh-Pc\Desktop\HomeFORNOW\KHEDMA\src\main\java\com\example\stage\service\AIRecommendationService.java
-----
package com.example.stage.service;

import com.example.stage.model.CV;
import com.example.stage.model.CVAnalysis;
import com.example.stage.model.CVRecommendation;

public class AIRecommendationService {
    public enum ProfileType {
        ENGINEERING_INFO,      // GÃ©nie Informatique
        ENGINEERING_TELECOM,   // GÃ©nie des TÃ©lÃ©communications
        ENGINEERING_ELECTRO,   // GÃ©nie Ã‰lectromÃ©canique
        ENGINEERING_CIVIL,     // GÃ©nie Civil
        ENGINEERING_MECHA,     // GÃ©nie MÃ©catronique
        BUSINESS_LBC,         // Licence en Business Computing
        BUSINESS_LMAD,        // Licence en MathÃ©matiques AppliquÃ©es
        BUSINESS_LSG,         // Licence en Sciences de Gestion
        MASTER_BA,            // Master en Business Analytics
        MASTER_CCA,           // Master en ComptabilitÃ©
        MASTER_MDSI,          // Master en Management Digital
        MASTER_MKD,           // Master en Marketing Digital
        MASTER_FIND,          // Master en Finance Digitale
        MASTER_GAMMA          // Master en Gestion Actuarielle
    }

    public CVRecommendation generateRecommendations(CV cv, ProfileType profileType) {
        // Analyse du CV selon le profil
        CVAnalysis analysis = analyzeCVContent(cv);

        // GÃ©nÃ©ration de recommandations spÃ©cifiques au profil
        return generateProfileSpecificRecommendations(analysis, profileType);
    }

    private CVAnalysis analyzeCVContent(CV cv) {
        // Analyse du contenu actuel du CV
        // Identification des points forts et faibles
        return new CVAnalysis();
    }

    private CVRecommendation generateProfileSpecificRecommendations(CVAnalysis analysis, ProfileType profileType) {
        // GÃ©nÃ©ration de recommandations basÃ©es sur le type de profil
        return new CVRecommendation();
    }
}
==================================================

Fichier: src\main\java\com\example\stage\ai\AIResponseParser.java
Chemin complet: C:\Users\Sh-Pc\Desktop\HomeFORNOW\KHEDMA\src\main\java\com\example\stage\ai\AIResponseParser.java
-----
package com.example.stage.ai;

import com.example.stage.model.CVAnalysis;
import java.util.Arrays;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

public class AIResponseParser {
    // Constantes pour les patterns de reconnaissance
    private static final String OVERALL_PATTERN = "(?i)Overall.*?:(.+?)(?=\\n|$)";
    private static final String PRESENTATION_PATTERN = "(?i)Presentation.*?:(.+?)(?=\\n\\n|$)";
    private static final String SKILLS_PATTERN = "(?i)Skills.*?:(.+?)(?=\\n\\n|$)";
    private static final String EXPERIENCE_PATTERN = "(?i)Experience.*?:(.+?)(?=\\n\\n|$)";
    private static final String STRENGTHS_PATTERN = "(?i)Strengths?:([\\s\\S]*?)(?=\\n\\n|Weaknesses|Areas for Improvement|$)";
    private static final String WEAKNESSES_PATTERN = "(?i)(Weaknesses|Areas for Improvement):([\\s\\S]*?)(?=\\n\\n|Recommendations|$)";
    private static final String RECOMMENDATIONS_PATTERN = "(?i)Recommendations:([\\s\\S]*?)(?=\\n\\n|Career Paths|$)";
    private static final String CAREER_PATHS_PATTERN = "(?i)Career Paths:([\\s\\S]*?)(?=\\n\\n|$)";

    public CVAnalysis parseAnalysisResponse(String aiResponse) {
        if (aiResponse == null || aiResponse.trim().isEmpty()) {
            throw new IllegalArgumentException("AI response cannot be null or empty");
        }

        CVAnalysis analysis = new CVAnalysis();
        analysis.setRawAnalysis(aiResponse);

        // Extraire les diffÃ©rentes parties de l'analyse
        extractOverallScore(aiResponse, analysis);
        extractPresentationAnalysis(aiResponse, analysis);
        extractSkillsAnalysis(aiResponse, analysis);
        extractExperienceAnalysis(aiResponse, analysis);
        extractListItems(aiResponse, STRENGTHS_PATTERN, analysis::addStrength);
        extractListItems(aiResponse, WEAKNESSES_PATTERN, analysis::addWeakness);
        extractListItems(aiResponse, RECOMMENDATIONS_PATTERN, analysis::addRecommendation);
        extractListItems(aiResponse, CAREER_PATHS_PATTERN, analysis::addCareerPath);

        return analysis;
    }

    private void extractOverallScore(String response, CVAnalysis analysis) {
        String score = extractPattern(response, OVERALL_PATTERN);
        if (score != null) {
            analysis.setOverallScore(score.trim());
        }
    }

    private void extractPresentationAnalysis(String response, CVAnalysis analysis) {
        String presentation = extractPattern(response, PRESENTATION_PATTERN);
        if (presentation != null) {
            analysis.setPresentationAnalysis(presentation.trim());
        }
    }

    private void extractSkillsAnalysis(String response, CVAnalysis analysis) {
        String skills = extractPattern(response, SKILLS_PATTERN);
        if (skills != null) {
            analysis.setSkillsAnalysis(skills.trim());
        }
    }

    private void extractExperienceAnalysis(String response, CVAnalysis analysis) {
        String experience = extractPattern(response, EXPERIENCE_PATTERN);
        if (experience != null) {
            analysis.setExperienceAnalysis(experience.trim());
        }
    }

    private void extractListItems(String response, String pattern, java.util.function.Consumer<String> consumer) {
        String content = extractPattern(response, pattern);
        if (content != null) {
            Arrays.stream(content.split("(?m)^[-â€¢*]\\s*"))
                    .map(String::trim)
                    .filter(s -> !s.isEmpty())
                    .forEach(consumer);
        }
    }

    private String extractPattern(String text, String pattern) {
        Pattern p = Pattern.compile(pattern);
        Matcher m = p.matcher(text);
        if (m.find()) {
            return m.groupCount() > 1 ? m.group(2) : m.group(1);
        }
        return null;
    }
}
==================================================

Fichier: src\main\java\com\example\stage\model\CVAnalysis.java
Chemin complet: C:\Users\Sh-Pc\Desktop\HomeFORNOW\KHEDMA\src\main\java\com\example\stage\model\CVAnalysis.java
-----
package com.example.stage.model;

import java.time.LocalDateTime;
import java.util.*;

public class CVAnalysis {
    // Scores et mÃ©triques
    private double completenessScore;
    private double presentationScore;
    private double experienceScore;
    private double educationScore;
    private double skillsRelevanceScore;
    private Map<String, Double> skillsMatchScore;

    // Analyses textuelles
    private List<String> suggestions;
    private List<String> strengths;
    private List<String> improvements;
    private String overallFeedback;

    // Analyses spÃ©cifiques
    private Map<String, String> sectionFeedback;
    private List<String> missingElements;
    private List<String> recommendedSkills;

    // MÃ©tadonnÃ©es
    private LocalDateTime analysisDate;
    private String analysisVersion;
    private String jobMarketTarget;

    // Constructeur
    public CVAnalysis() {
        this.skillsMatchScore = new HashMap<>();
        this.suggestions = new ArrayList<>();
        this.strengths = new ArrayList<>();
        this.improvements = new ArrayList<>();
        this.sectionFeedback = new HashMap<>();
        this.missingElements = new ArrayList<>();
        this.recommendedSkills = new ArrayList<>();
        this.analysisDate = LocalDateTime.now();
        this.analysisVersion = "1.0";
    }

    // Getters et Setters avec validation
    public double getCompletenessScore() {
        return completenessScore;
    }

    public void setCompletenessScore(double completenessScore) {
        if (completenessScore < 0 || completenessScore > 100) {
            throw new IllegalArgumentException("Completeness score must be between 0 and 100");
        }
        this.completenessScore = completenessScore;
    }

    public double getPresentationScore() {
        return presentationScore;
    }

    public void setPresentationScore(double presentationScore) {
        if (presentationScore < 0 || presentationScore > 100) {
            throw new IllegalArgumentException("Presentation score must be between 0 and 100");
        }
        this.presentationScore = presentationScore;
    }

    public double getExperienceScore() {
        return experienceScore;
    }

    public void setExperienceScore(double experienceScore) {
        if (experienceScore < 0 || experienceScore > 100) {
            throw new IllegalArgumentException("Experience score must be between 0 and 100");
        }
        this.experienceScore = experienceScore;
    }

    public double getEducationScore() {
        return educationScore;
    }

    public void setEducationScore(double educationScore) {
        if (educationScore < 0 || educationScore > 100) {
            throw new IllegalArgumentException("Education score must be between 0 and 100");
        }
        this.educationScore = educationScore;
    }

    public double getSkillsRelevanceScore() {
        return skillsRelevanceScore;
    }

    public void setSkillsRelevanceScore(double skillsRelevanceScore) {
        if (skillsRelevanceScore < 0 || skillsRelevanceScore > 100) {
            throw new IllegalArgumentException("Skills relevance score must be between 0 and 100");
        }
        this.skillsRelevanceScore = skillsRelevanceScore;
    }

    public Map<String, Double> getSkillsMatchScore() {
        return new HashMap<>(skillsMatchScore);
    }

    public void setSkillsMatchScore(Map<String, Double> skillsMatchScore) {
        this.skillsMatchScore = new HashMap<>(skillsMatchScore);
    }

    public void addSkillScore(String skill, double score) {
        if (score < 0 || score > 100) {
            throw new IllegalArgumentException("Skill score must be between 0 and 100");
        }
        this.skillsMatchScore.put(skill, score);
    }

    public List<String> getSuggestions() {
        return new ArrayList<>(suggestions);
    }

    public void setSuggestions(List<String> suggestions) {
        this.suggestions = new ArrayList<>(suggestions);
    }

    public void addSuggestion(String suggestion) {
        if (suggestion != null && !suggestion.trim().isEmpty()) {
            this.suggestions.add(suggestion.trim());
        }
    }

    public List<String> getStrengths() {
        return new ArrayList<>(strengths);
    }

    public void setStrengths(List<String> strengths) {
        this.strengths = new ArrayList<>(strengths);
    }

    public void addStrength(String strength) {
        if (strength != null && !strength.trim().isEmpty()) {
            this.strengths.add(strength.trim());
        }
    }

    public List<String> getImprovements() {
        return new ArrayList<>(improvements);
    }

    public void setImprovements(List<String> improvements) {
        this.improvements = new ArrayList<>(improvements);
    }

    public void addImprovement(String improvement) {
        if (improvement != null && !improvement.trim().isEmpty()) {
            this.improvements.add(improvement.trim());
        }
    }

    public String getOverallFeedback() {
        return overallFeedback;
    }

    public void setOverallFeedback(String overallFeedback) {
        this.overallFeedback = overallFeedback;
    }

    public Map<String, String> getSectionFeedback() {
        return new HashMap<>(sectionFeedback);
    }

    public void setSectionFeedback(Map<String, String> sectionFeedback) {
        this.sectionFeedback = new HashMap<>(sectionFeedback);
    }

    public void addSectionFeedback(String section, String feedback) {
        if (section != null && feedback != null) {
            this.sectionFeedback.put(section.trim(), feedback.trim());
        }
    }

    public List<String> getMissingElements() {
        return new ArrayList<>(missingElements);
    }

    public void setMissingElements(List<String> missingElements) {
        this.missingElements = new ArrayList<>(missingElements);
    }

    public void addMissingElement(String element) {
        if (element != null && !element.trim().isEmpty()) {
            this.missingElements.add(element.trim());
        }
    }

    public List<String> getRecommendedSkills() {
        return new ArrayList<>(recommendedSkills);
    }

    public void setRecommendedSkills(List<String> recommendedSkills) {
        this.recommendedSkills = new ArrayList<>(recommendedSkills);
    }

    public void addRecommendedSkill(String skill) {
        if (skill != null && !skill.trim().isEmpty()) {
            this.recommendedSkills.add(skill.trim());
        }
    }

    public LocalDateTime getAnalysisDate() {
        return analysisDate;
    }

    public String getAnalysisVersion() {
        return analysisVersion;
    }

    public void setAnalysisVersion(String analysisVersion) {
        this.analysisVersion = analysisVersion;
    }

    public String getJobMarketTarget() {
        return jobMarketTarget;
    }

    public void setJobMarketTarget(String jobMarketTarget) {
        this.jobMarketTarget = jobMarketTarget;
    }

    // MÃ©thodes utilitaires
    public double getOverallScore() {
        return (completenessScore + presentationScore + experienceScore +
                educationScore + skillsRelevanceScore) / 5.0;
    }

    public boolean isComplete() {
        return completenessScore >= 80.0;
    }

    public List<String> getPriorityImprovements() {
        List<String> priorities = new ArrayList<>();
        if (completenessScore < 70) priorities.add("Complete missing information");
        if (presentationScore < 70) priorities.add("Improve CV presentation");
        if (skillsRelevanceScore < 70) priorities.add("Update skills section");
        return priorities;
    }

    // Override toString pour l'affichage
    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("CV Analysis Report (").append(analysisDate).append(")\n");
        sb.append("Version: ").append(analysisVersion).append("\n\n");

        sb.append("Overall Score: ").append(String.format("%.2f%%", getOverallScore())).append("\n");
        sb.append("Completeness: ").append(String.format("%.2f%%", completenessScore)).append("\n");
        sb.append("Presentation: ").append(String.format("%.2f%%", presentationScore)).append("\n");
        sb.append("Experience: ").append(String.format("%.2f%%", experienceScore)).append("\n");
        sb.append("Education: ").append(String.format("%.2f%%", educationScore)).append("\n");
        sb.append("Skills Relevance: ").append(String.format("%.2f%%", skillsRelevanceScore)).append("\n\n");

        if (!strengths.isEmpty()) {
            sb.append("Strengths:\n");
            strengths.forEach(s -> sb.append("+ ").append(s).append("\n"));
            sb.append("\n");
        }

        if (!improvements.isEmpty()) {
            sb.append("Areas for Improvement:\n");
            improvements.forEach(i -> sb.append("- ").append(i).append("\n"));
            sb.append("\n");
        }

        if (!suggestions.isEmpty()) {
            sb.append("Suggestions:\n");
            suggestions.forEach(s -> sb.append("* ").append(s).append("\n"));
        }

        return sb.toString();
    }

    // Override equals et hashCode
    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (o == null || getClass() != o.getClass()) return false;
        CVAnalysis that = (CVAnalysis) o;
        return Objects.equals(analysisDate, that.analysisDate) &&
                Objects.equals(analysisVersion, that.analysisVersion);
    }

    @Override
    public int hashCode() {
        return Objects.hash(analysisDate, analysisVersion);
    }

    public void addWeakness(String s) {
    }

    public void setOverallScore(String trim) {
    }

    public void setPresentationAnalysis(String trim) {
    }

    public void setExperienceAnalysis(String trim) {
    }

    public void setSkillsAnalysis(String trim) {
    }

    public void setRawAnalysis(String aiResponse) {
    }

    public void addRecommendation(String s) {
    }

    public void addCareerPath(String s) {
    }
}
==================================================

Fichier: src\main\resources\com\example\stage\page2.fxml
Chemin complet: C:\Users\Sh-Pc\Desktop\HomeFORNOW\KHEDMA\src\main\resources\com\example\stage\page2.fxml
-----
<?xml version="1.0" encoding="UTF-8"?>

<?import java.lang.String?>
<?import javafx.collections.FXCollections?>
<?import javafx.scene.control.Button?>
<?import javafx.scene.control.ComboBox?>
<?import javafx.scene.control.DatePicker?>
<?import javafx.scene.control.Label?>
<?import javafx.scene.control.ScrollPane?>
<?import javafx.scene.control.TextArea?>
<?import javafx.scene.control.TextField?>
<?import javafx.scene.image.Image?>
<?import javafx.scene.image.ImageView?>
<?import javafx.scene.layout.AnchorPane?>
<?import javafx.scene.layout.ColumnConstraints?>
<?import javafx.scene.layout.GridPane?>
<?import javafx.scene.layout.HBox?>
<?import javafx.scene.layout.RowConstraints?>
<?import javafx.scene.layout.VBox?>

<AnchorPane prefHeight="600.0" prefWidth="900.0" xmlns="http://javafx.com/javafx/21" xmlns:fx="http://javafx.com/fxml/1" fx:controller="com.example.stage.controller.Page2Controller">
    <!-- Images at the top -->
    <ImageView fitHeight="109.0" fitWidth="140.0" layoutY="20.0" pickOnBounds="true" preserveRatio="true">
        <image>
            <Image url="@../../../images/logo.png" />
        </image>
    </ImageView>

    <!-- Logo Image Right -->
    <ImageView fitHeight="46.0" fitWidth="119.0" layoutX="729.0" layoutY="51.0" pickOnBounds="true" preserveRatio="true" AnchorPane.rightAnchor="10.0">
        <image>
            <Image url="@../../../images/esprim.png" />
        </image>
    </ImageView>

    <HBox alignment="CENTER" layoutX="557.0" layoutY="8.0" prefHeight="109.0" prefWidth="335.0" spacing="20" AnchorPane.leftAnchor="557.0" AnchorPane.rightAnchor="8.0" AnchorPane.topAnchor="8.0">
        <!-- Logo Image Right -->
    </HBox>

    <ScrollPane fitToHeight="true" fitToWidth="true" hbarPolicy="NEVER" layoutY="126.0" prefHeight="464.0" prefWidth="888.0" vbarPolicy="ALWAYS" AnchorPane.bottomAnchor="10.0" AnchorPane.leftAnchor="10.0" AnchorPane.rightAnchor="10.0" AnchorPane.topAnchor="126.0">
        <VBox alignment="CENTER" prefHeight="630.0" prefWidth="859.0" spacing="10" style="-fx-padding: 20px;">
            <GridPane alignment="CENTER" hgap="10" maxWidth="Infinity" prefHeight="598.0" prefWidth="825.0" vgap="10">
                <!-- Section: Skills -->
                <Label fx:id="skillsLabel" style="-fx-font-weight: bold; -fx-text-fill: #E31A22;" text="Skills" GridPane.columnSpan="2" GridPane.rowIndex="0" />

                <!-- Add this right after the skills section header -->

                <VBox fx:id="skillContainerList" spacing="5" GridPane.columnSpan="2" GridPane.rowIndex="1">
                    <HBox spacing="10">
                        <TextField fx:id="skillsField" promptText="Enter a skill"/>
                        <Button onAction="#addSkill" style="-fx-background-color: #E31A22; -fx-text-fill: white;" text="Add Skill"/>
                    </HBox>
                    <VBox fx:id="skillsContainer" spacing="5"/>
                </VBox>
                <!-- Section: Projects -->
                <Label fx:id="projectsLabel" style="-fx-font-weight: bold; -fx-text-fill: #E31A22;" text="Projects" GridPane.columnSpan="2" GridPane.rowIndex="2" />
                <VBox fx:id="projectsContainer" spacing="5" GridPane.columnSpan="2" GridPane.rowIndex="3">
                    <GridPane hgap="5" vgap="5">
                        <Label text="Project Name:" GridPane.columnIndex="0" GridPane.rowIndex="0" />
                        <TextField fx:id="projectNameField" GridPane.columnIndex="1" GridPane.rowIndex="0" />
                        <Label text="Project Description:" GridPane.columnIndex="0" GridPane.rowIndex="1" />
                        <HBox GridPane.columnIndex="1" GridPane.rowIndex="1">
                            <TextArea fx:id="projectDescriptionArea" prefHeight="60" />
                            <Button onAction="#showProjectHelp" style="-fx-background-color: #E31A22; -fx-text-fill: white; -fx-font-weight: bold;" text="?" />
                        </HBox>
                        <Button onAction="#addProject" style="-fx-background-color: #E31A22; -fx-text-fill: white;" text="Add Project" GridPane.columnIndex="1" GridPane.rowIndex="2" />
                        <columnConstraints>
                            <ColumnConstraints />
                            <ColumnConstraints />
                        </columnConstraints>
                        <rowConstraints>
                            <RowConstraints />
                            <RowConstraints />
                            <RowConstraints />
                        </rowConstraints>
                    </GridPane>
                </VBox>

                <!-- Section: Certificates -->
                <Label fx:id="certificatesLabel" style="-fx-font-weight: bold; -fx-text-fill: #E31A22;" text="Certificates" GridPane.columnSpan="2" GridPane.rowIndex="4" />
                <VBox fx:id="certificatesContainer" spacing="5" GridPane.columnSpan="2" GridPane.rowIndex="5">
                    <GridPane hgap="5" vgap="5">
                        <Label text="Certificate Name:" GridPane.columnIndex="0" GridPane.rowIndex="0" />
                        <TextField fx:id="certificateNameField" GridPane.columnIndex="1" GridPane.rowIndex="0" />
                        <Label text="Institution:" GridPane.columnIndex="0" GridPane.rowIndex="1" />
                        <TextField fx:id="certificateInstitutionField" GridPane.columnIndex="1" GridPane.rowIndex="1" />
                        <Label text="Date of Receipt:" GridPane.columnIndex="0" GridPane.rowIndex="2" />
                        <DatePicker fx:id="certificateDateField" GridPane.columnIndex="1" GridPane.rowIndex="2" />
                        <Button onAction="#addCertificate" style="-fx-background-color: #E31A22; -fx-text-fill: white;" text="Add Certificate" GridPane.columnIndex="1" GridPane.rowIndex="3" />
                        <columnConstraints>
                            <ColumnConstraints />
                            <ColumnConstraints />
                        </columnConstraints>
                        <rowConstraints>
                            <RowConstraints />
                            <RowConstraints />
                            <RowConstraints />
                            <RowConstraints />
                        </rowConstraints>
                    </GridPane>
                </VBox>

                <!-- Section: Languages -->
                <Label fx:id="languagesLabel" style="-fx-font-weight: bold; -fx-text-fill: #E31A22;" text="Languages" GridPane.columnSpan="2" GridPane.rowIndex="6" />
                <VBox fx:id="languagesContainer" spacing="5" GridPane.columnSpan="2" GridPane.rowIndex="7">
                    <GridPane hgap="5" vgap="5">
                        <Label text="Language:" GridPane.columnIndex="0" GridPane.rowIndex="0" />
                        <TextField fx:id="languageField" GridPane.columnIndex="1" GridPane.rowIndex="0" />
                        <Label text="Proficiency Level:" GridPane.columnIndex="0" GridPane.rowIndex="1" />
                        <ComboBox fx:id="languageProficiencyField" GridPane.columnIndex="1" GridPane.rowIndex="1">
                            <items>
                                <FXCollections fx:factory="observableArrayList">
                                    <String fx:value="A1 (Beginner)" />      <!-- A1: Basic user, beginner level -->
                                    <String fx:value="A2 (Elementary)" />    <!-- A2: Basic user, elementary level -->
                                    <String fx:value="B1 (Intermediate)" />  <!-- B1: Independent user, intermediate level -->
                                    <String fx:value="B2 (Upper Intermediate)" /> <!-- B2: Independent user, upper intermediate level -->
                                    <String fx:value="C1 (Advanced)" />      <!-- C1: Proficient user, advanced level -->
                                    <String fx:value="C2 (Bilingual)" />     <!-- C2: Proficient user, near-native fluency -->

                                </FXCollections>
                            </items>
                        </ComboBox>
                        <Button onAction="#addLanguage" style="-fx-background-color: #E31A22; -fx-text-fill: white;" text="Add Language" GridPane.columnIndex="1" GridPane.rowIndex="2" />
                        <columnConstraints>
                            <ColumnConstraints />
                            <ColumnConstraints />
                        </columnConstraints>
                        <rowConstraints>
                            <RowConstraints />
                            <RowConstraints />
                            <RowConstraints />
                        </rowConstraints>
                    </GridPane>
                </VBox>

                <!-- Back and Translate Buttons -->

                <Button fx:id="backButton" onAction="#goToPage1" style="-fx-background-color: #E31A22; -fx-text-fill: white;" text="Back" GridPane.columnIndex="0" GridPane.rowIndex="8" />
                <ComboBox fx:id="languageComboBox" GridPane.columnIndex="0" GridPane.rowIndex="9" />
                <Button fx:id="translateButton" onAction="#translatePage" style="-fx-background-color: #E31A22; -fx-text-fill: white;" text="Translate" GridPane.columnIndex="1" GridPane.rowIndex="9" />

                <!-- Generate PDF Button -->
                <Button fx:id="generatePDFButton" onAction="#generatePDF" style="-fx-background-color: #E31A22; -fx-text-fill: white;" text="Generate PDF" GridPane.columnIndex="1" GridPane.rowIndex="10" />
                <Button fx:id="autoFillButton" text="Auto Fill" onAction="#autoFillForm" GridPane.columnIndex="1" GridPane.rowIndex="11" />
                <columnConstraints>
                    <ColumnConstraints />
                    <ColumnConstraints />
                </columnConstraints>
                <rowConstraints>
                    <RowConstraints />
                    <RowConstraints />
                    <RowConstraints />
                    <RowConstraints />
                    <RowConstraints />
                    <RowConstraints />
                    <RowConstraints />
                    <RowConstraints />
                    <RowConstraints />
                    <RowConstraints />
                    <RowConstraints />
                    <RowConstraints />
                </rowConstraints>
            </GridPane>
        </VBox>
    </ScrollPane>

    <!-- Logo Image Left -->

    <ImageView fitHeight="100.0" fitWidth="150.0" layoutX="231.0" layoutY="22.0" pickOnBounds="true" preserveRatio="true">
        <image>
            <Image url="@../../../images/tunisie-removebg-preview.png" />
        </image>
    </ImageView>
</AnchorPane>
==================================================

Fichier: src\main\resources\com\example\stage\page1.fxml
Chemin complet: C:\Users\Sh-Pc\Desktop\HomeFORNOW\KHEDMA\src\main\resources\com\example\stage\page1.fxml
-----
<?xml version="1.0" encoding="UTF-8"?>

<?import javafx.scene.control.*?>
<?import javafx.scene.image.Image?>
<?import javafx.scene.image.ImageView?>
<?import javafx.scene.layout.*?>

<?import java.lang.String?>
<?import javafx.collections.FXCollections?>
<AnchorPane prefHeight="600.0" prefWidth="900.0" xmlns="http://javafx.com/javafx/21" xmlns:fx="http://javafx.com/fxml/1" fx:controller="com.example.stage.controller.Page1Controller">
    <ImageView fitHeight="109.0" fitWidth="140.0" layoutY="20.0" pickOnBounds="true" preserveRatio="true">
        <image>
            <Image url="@../../../images/logo.png" />
        </image>
    </ImageView>

    <!-- Logo Image Right -->
    <ImageView fitHeight="46.0" fitWidth="119.0" layoutX="729.0" layoutY="51.0" pickOnBounds="true" preserveRatio="true" AnchorPane.rightAnchor="10.0">
        <image>
            <Image url="@../../../images/esprim.png" />
        </image>
    </ImageView>

    <ImageView fitHeight="100.0" fitWidth="150.0" layoutX="231.0" layoutY="22.0" pickOnBounds="true" preserveRatio="true">
        <image>
            <Image url="@../../../images/tunisie-removebg-preview.png" />
        </image>
    </ImageView>

    <ScrollPane fitToHeight="true" fitToWidth="true" hbarPolicy="NEVER" vbarPolicy="ALWAYS" AnchorPane.bottomAnchor="10.0" AnchorPane.leftAnchor="10.0" AnchorPane.rightAnchor="10.0" AnchorPane.topAnchor="126.0">
        <VBox fillWidth="true" spacing="10" style="-fx-padding: 20px;">
            <!-- Language Selection -->
            <HBox spacing="10">
                <ComboBox fx:id="languageComboBox" prefHeight="21.0" prefWidth="113.0" />
                <Button fx:id="translateButton" onAction="#translatePage" style="-fx-background-color: #E31A22; -fx-text-fill: white;" text="Translate" />
            </HBox>

            <!-- Personal Information Section -->
            <VBox spacing="10">
                <Label fx:id="personalInformationLabel" style="-fx-font-weight: bold; -fx-text-fill: #E31A22;" text="Personal Information" />
                <GridPane hgap="10" vgap="10">
                    <columnConstraints>
                        <ColumnConstraints maxWidth="104.0" minWidth="59.0" prefWidth="104.0" />
                        <ColumnConstraints maxWidth="473.0" minWidth="428.0" prefWidth="428.0" />
                    </columnConstraints>
                    <rowConstraints>
                        <RowConstraints />
                        <RowConstraints />
                        <RowConstraints />
                        <RowConstraints />
                        <RowConstraints />
                        <RowConstraints />
                    </rowConstraints>

                    <Label fx:id="fullNameLabel" text="Full Name" GridPane.columnIndex="0" GridPane.rowIndex="0" />
                    <TextField fx:id="nameField" prefHeight="22.0" prefWidth="471.0" GridPane.columnIndex="1" GridPane.rowIndex="0" />

                    <Label fx:id="emailLabel" text="Email" GridPane.columnIndex="0" GridPane.rowIndex="1" />
                    <TextField fx:id="emailField" GridPane.columnIndex="1" GridPane.rowIndex="1" />

                    <Label fx:id="phoneLabel" text="Phone" GridPane.columnIndex="0" GridPane.rowIndex="2" />
                    <TextField fx:id="phoneField" GridPane.columnIndex="1" GridPane.rowIndex="2" />

                    <Label fx:id="addressLabel" text="Address" GridPane.columnIndex="0" GridPane.rowIndex="3" />
                    <TextArea fx:id="addressArea" GridPane.columnIndex="1" GridPane.rowIndex="3" />

                    <Label fx:id="linkedinLabel" text="LinkedIn" GridPane.columnIndex="0" GridPane.rowIndex="4" />
                    <TextField fx:id="linkedinField" GridPane.columnIndex="1" GridPane.rowIndex="4" />

                    <Label fx:id="portfolioLabel" text="Portfolio" GridPane.columnIndex="0" GridPane.rowIndex="5" />
                    <TextField fx:id="portfolioField" GridPane.columnIndex="1" GridPane.rowIndex="5" />
                </GridPane>
            </VBox>

            <!-- Summary Section -->
            <VBox spacing="10">
                <Label fx:id="summaryObjectiveLabel" style="-fx-font-weight: bold; -fx-text-fill: #E31A22;" text="Summary / Objective" />
                <HBox spacing="10">
                    <TextArea fx:id="summaryArea" prefHeight="40.0" prefWidth="541.0" />
                    <Button onAction="#showSummaryHelp" style="-fx-background-color: #E31A22; -fx-text-fill: white;" text="â“˜" />
                </HBox>
            </VBox>

            <!-- Education Section -->

            <!-- Remove this duplicate comment and section -->
            <!-- Education Section -->

            <!-- Keep only this Education Section -->
            <VBox spacing="10">
                <Label fx:id="educationLabel" style="-fx-font-weight: bold; -fx-text-fill: #E31A22;" text="Education" />
                <VBox fx:id="educationContainer" spacing="5">
                    <GridPane hgap="10" vgap="10">
                        <columnConstraints>
                            <ColumnConstraints maxWidth="109.0" minWidth="93.0" prefWidth="106.0" />
                            <ColumnConstraints maxWidth="169.0" minWidth="153.0" prefWidth="156.0" />
                        </columnConstraints>
                        <rowConstraints>
                            <RowConstraints />
                            <RowConstraints />
                            <RowConstraints />
                            <RowConstraints />
                            <RowConstraints />
                        </rowConstraints>

                        <Label text="Institution" GridPane.rowIndex="0" />
                        <ComboBox fx:id="institutionComboBox" prefWidth="150.0" GridPane.columnIndex="1" GridPane.rowIndex="0">
                            <items>
                                <FXCollections fx:factory="observableArrayList">
                                    <String fx:value="ESPRIT" />
                                    <String fx:value="ESPRIM" />
                                    <String fx:value="ESPRIT SCHOOL OF BUSINESS" />
                                </FXCollections>
                            </items>
                        </ComboBox>

                        <Label text="Degree Level" GridPane.rowIndex="1" />
                        <ComboBox fx:id="degreeLevelComboBox" prefWidth="150.0" GridPane.columnIndex="1" GridPane.rowIndex="1" />

                        <Label text="Specialization" GridPane.rowIndex="2" />
                        <ComboBox fx:id="specializationComboBox" prefWidth="150.0" GridPane.columnIndex="1" GridPane.rowIndex="2" />

                        <Label text="Graduation Date" GridPane.rowIndex="3" />
                        <DatePicker fx:id="graduationDateField" GridPane.columnIndex="1" GridPane.rowIndex="3" />
                    </GridPane>
                </VBox>
                <Button fx:id="addEducationButton" onAction="#addEducation"
                        style="-fx-background-color: #E31A22; -fx-text-fill: white;" text="Add Education" />
            </VBox>
            <!-- Work Experience Section -->
            <VBox spacing="10">
                <Label fx:id="workExperienceLabel" style="-fx-font-weight: bold; -fx-text-fill: #E31A22;" text="Work Experience" />
                <VBox fx:id="workExperienceContainer" spacing="5">
                    <GridPane hgap="10" vgap="10">
                        <columnConstraints>
                            <ColumnConstraints maxWidth="109.0" minWidth="93.0" prefWidth="106.0" />
                            <ColumnConstraints maxWidth="169.0" minWidth="153.0" prefWidth="156.0" />
                        </columnConstraints>
                        <rowConstraints>
                            <RowConstraints />
                            <RowConstraints />
                            <RowConstraints />
                            <RowConstraints />
                            <RowConstraints />
                        </rowConstraints>

                        <Label text="Job Title" GridPane.rowIndex="0" />
                        <TextField fx:id="jobTitleField" GridPane.columnIndex="1" GridPane.rowIndex="0" />

                        <Label text="Company" GridPane.rowIndex="1" />
                        <TextField fx:id="companyField" GridPane.columnIndex="1" GridPane.rowIndex="1" />

                        <Label text="Start Date" GridPane.rowIndex="2" />
                        <DatePicker fx:id="startDateField" GridPane.columnIndex="1" GridPane.rowIndex="2" />

                        <Label text="End Date" GridPane.rowIndex="3" />
                        <DatePicker fx:id="endDateField" GridPane.columnIndex="1" GridPane.rowIndex="3" />

                        <Label text="Description" GridPane.rowIndex="4" />
                        <TextArea fx:id="descriptionArea" prefHeight="60" GridPane.columnIndex="1" GridPane.rowIndex="4" />
                    </GridPane>
                </VBox>
                <Button fx:id="addWorkExperienceButton" onAction="#addWorkExperience" style="-fx-background-color: #E31A22; -fx-text-fill: white;" text="Add Work Experience" />
            </VBox>

            <!-- Footer Buttons -->
            <HBox alignment="CENTER" spacing="10">
                <Button fx:id="autoFillButton" onAction="#autoFillForm" style="-fx-background-color: #E31A22; -fx-text-fill: white;" text="Auto Fill" />
                <Button fx:id="nextButton" onAction="#goToPage2" style="-fx-background-color: #E31A22; -fx-text-fill: white;" text="Next" />
            </HBox>
        </VBox>
    </ScrollPane>
</AnchorPane>
==================================================

Fichier: src\main\resources\com\example\stage\i18n\messages_ar.properties
Chemin complet: C:\Users\Sh-Pc\Desktop\HomeFORNOW\KHEDMA\src\main\resources\com\example\stage\i18n\messages_ar.properties
-----
# Arabic translations
translate=ØªØ±Ø¬Ù…Ø©
back=Ø±Ø¬ÙˆØ¹
skills=Ø§Ù„Ù…Ù‡Ø§Ø±Ø§Øª
projects=Ø§Ù„Ù…Ø´Ø§Ø±ÙŠØ¹
certificates=Ø§Ù„Ø´Ù‡Ø§Ø¯Ø§Øª
languages=Ø§Ù„Ù„ØºØ§Øª
generate_pdf=Ø¥Ù†Ø´Ø§Ø¡ PDF
personal_information=Ø§Ù„Ù…Ø¹Ù„ÙˆÙ…Ø§Øª Ø§Ù„Ø´Ø®ØµÙŠØ©
full_name=Ø§Ù„Ø§Ø³Ù… Ø§Ù„ÙƒØ§Ù…Ù„
email=Ø§Ù„Ø¨Ø±ÙŠØ¯ Ø§Ù„Ø¥Ù„ÙƒØªØ±ÙˆÙ†ÙŠ
phone=Ø§Ù„Ù‡Ø§ØªÙ
address=Ø§Ù„Ø¹Ù†ÙˆØ§Ù†
linkedin=Ù„ÙŠÙ†ÙƒØ¯ Ø¥Ù†
portfolio=Ø§Ù„Ù…Ø­ÙØ¸Ø©
summary_objective=Ø§Ù„Ù…Ù„Ø®Øµ / Ø§Ù„Ù‡Ø¯Ù
education=Ø§Ù„ØªØ¹Ù„ÙŠÙ…
work_experience=Ø§Ù„Ø®Ø¨Ø±Ø© Ø§Ù„Ù…Ù‡Ù†ÙŠØ©
add_education=Ø¥Ø¶Ø§ÙØ© ØªØ¹Ù„ÙŠÙ…
add_experience=Ø¥Ø¶Ø§ÙØ© Ø®Ø¨Ø±Ø©
project_name=Ø§Ø³Ù… Ø§Ù„Ù…Ø´Ø±ÙˆØ¹
project_description=ÙˆØµÙ Ø§Ù„Ù…Ø´Ø±ÙˆØ¹
certificate_name=Ø§Ø³Ù… Ø§Ù„Ø´Ù‡Ø§Ø¯Ø©
institution=Ø§Ù„Ù…Ø¤Ø³Ø³Ø©
date_of_receipt=ØªØ§Ø±ÙŠØ® Ø§Ù„Ø§Ø³ØªÙ„Ø§Ù…
language=Ø§Ù„Ù„ØºØ©
proficiency_level=Ù…Ø³ØªÙˆÙ‰ Ø§Ù„ÙƒÙØ§Ø¡Ø©
next=Ø§Ù„ØªØ§Ù„ÙŠ
auto_fill=Ù…Ù„Ø¡ ØªÙ„Ù‚Ø§Ø¦ÙŠ

# Additional translations
degree=Ø§Ù„Ø´Ù‡Ø§Ø¯Ø©
graduation_date=ØªØ§Ø±ÙŠØ® Ø§Ù„ØªØ®Ø±Ø¬
job_title=Ø§Ù„Ù…Ø³Ù…Ù‰ Ø§Ù„ÙˆØ¸ÙŠÙÙŠ
company=Ø§Ù„Ø´Ø±ÙƒØ©
start_date=ØªØ§Ø±ÙŠØ® Ø§Ù„Ø¨Ø¯Ø¡
end_date=ØªØ§Ø±ÙŠØ® Ø§Ù„Ø§Ù†ØªÙ‡Ø§Ø¡
description=Ø§Ù„ÙˆØµÙ
add_work_experience=Ø¥Ø¶Ø§ÙØ© Ø®Ø¨Ø±Ø© Ù…Ù‡Ù†ÙŠØ©
# Validation messages
name_required=Ø§Ù„Ø§Ø³Ù… Ù…Ø·Ù„ÙˆØ¨
email_required=Ø§Ù„Ø¨Ø±ÙŠØ¯ Ø§Ù„Ø¥Ù„ÙƒØªØ±ÙˆÙ†ÙŠ Ù…Ø·Ù„ÙˆØ¨
phone_required=Ø±Ù‚Ù… Ø§Ù„Ù‡Ø§ØªÙ Ù…Ø·Ù„ÙˆØ¨
invalid_email=ØµÙŠØºØ© Ø§Ù„Ø¨Ø±ÙŠØ¯ Ø§Ù„Ø¥Ù„ÙƒØªØ±ÙˆÙ†ÙŠ ØºÙŠØ± ØµØ­ÙŠØ­Ø©
invalid_phone=ØµÙŠØºØ© Ø±Ù‚Ù… Ø§Ù„Ù‡Ø§ØªÙ ØºÙŠØ± ØµØ­ÙŠØ­Ø©
invalid_linkedin=ØµÙŠØºØ© Ø±Ø§Ø¨Ø· Ù„ÙŠÙ†ÙƒØ¯ Ø¥Ù† ØºÙŠØ± ØµØ­ÙŠØ­Ø©

# Help messages
summary_help=Ø§ÙƒØªØ¨ Ù†Ø¨Ø°Ø© Ù…Ø®ØªØµØ±Ø© Ø¹Ù† Ø®Ù„ÙÙŠØªÙƒ Ø§Ù„Ù…Ù‡Ù†ÙŠØ© ÙˆØ£Ù‡Ø¯Ø§ÙÙƒ Ø§Ù„ÙˆØ¸ÙŠÙÙŠØ©

# Direction and alignment
direction=rtl
text.align=right
==================================================

Fichier: src\main\resources\com\example\stage\i18n\messages_de.properties
Chemin complet: C:\Users\Sh-Pc\Desktop\HomeFORNOW\KHEDMA\src\main\resources\com\example\stage\i18n\messages_de.properties
-----
# German translations
translate=Übersetzen
back=Zurück
skills=Fähigkeiten
projects=Projekte
certificates=Zertifikate
languages=Sprachen
generate_pdf=PDF Erstellen
personal_information=Persönliche Informationen
full_name=Vollständiger Name
email=E-Mail
phone=Telefon
address=Adresse
linkedin=LinkedIn
portfolio=Portfolio
summary_objective=Zusammenfassung / Ziel
education=Bildung
work_experience=Berufserfahrung
add_education=Bildung Hinzufügen
add_experience=Erfahrung Hinzufügen
project_name=Projektname
project_description=Projektbeschreibung
certificate_name=Zertifikatname
institution=Institution
date_of_receipt=Empfangsdatum
language=Sprache
proficiency_level=Kompetenzniveau
next=Weiter
auto_fill=Auto-Ausfüllen

# Additional German translations
degree=Abschluss
graduation_date=Abschlussdatum
job_title=Berufsbezeichnung
company=Unternehmen
start_date=Startdatum
end_date=Enddatum
description=Beschreibung
add_work_experience=Berufserfahrung Hinzufügen

# Validation messages
name_required=Name ist erforderlich
email_required=E-Mail ist erforderlich
phone_required=Telefonnummer ist erforderlich
invalid_email=Ungültiges E-Mail-Format
invalid_phone=Ungültige Telefonnummer
invalid_linkedin=Ungültige LinkedIn-URL

# Help messages
summary_help=Schreiben Sie eine kurze Übersicht über Ihren beruflichen Werdegang und Ihre Karriereziele
# messages_de.properties (Allemand)

enter_skill=Fähigkeit eingeben
enter_project_name=Projektname eingeben
enter_project_description=Projektbeschreibung eingeben
enter_certificate_name=Zertifikatsname eingeben
enter_institution=Institution eingeben
enter_language=Sprache eingeben
remove=Entfernen
level=Niveau
date=Datum

==================================================

Fichier: src\main\resources\com\example\stage\i18n\messages_en.properties
Chemin complet: C:\Users\Sh-Pc\Desktop\HomeFORNOW\KHEDMA\src\main\resources\com\example\stage\i18n\messages_en.properties
-----
# English translations
translate=Translate
back=Back
skills=Skills
projects=Projects
certificates=Certificates
languages=Languages
generate_pdf=Generate PDF
personal_information=Personal Information
full_name=Full Name
email=Email
phone=Phone
address=Address
linkedin=LinkedIn
portfolio=Portfolio
summary_objective=Summary / Objective
education=Education
work_experience=Work Experience
add_education=Add Education
add_experience=Add Experience
project_name=Project Name
project_description=Project Description
certificate_name=Certificate Name
institution=Institution
date_of_receipt=Date of Receipt
language=Language
proficiency_level=Proficiency Level
next=Next
auto_fill=Auto Fill

# Additional translations
degree=Degree
graduation_date=Graduation Date
job_title=Job Title
company=Company
start_date=Start Date
end_date=End Date
description=Description
add_work_experience=Add Work Experience

# Validation messages
name_required=Name is required
email_required=Email is required
phone_required=Phone number is required
invalid_email=Invalid email format
invalid_phone=Invalid phone format
invalid_linkedin=Invalid LinkedIn URL format

# Help messages
summary_help=Write a brief overview of your professional background and career objectives

==================================================

Fichier: src\main\resources\com\example\stage\i18n\messages_fr.properties
Chemin complet: C:\Users\Sh-Pc\Desktop\HomeFORNOW\KHEDMA\src\main\resources\com\example\stage\i18n\messages_fr.properties
-----
translate=Traduire
back=Retour
skills=CompÃƒÂ©tences
projects=Projets
certificates=Certificats
languages=Langues
generate_pdf=GÃƒÂ©nÃƒÂ©rer PDF
personal_information=Informations Personnelles
full_name=Nom Complet
email=Email
phone=TÃƒÂ©lÃƒÂ©phone
address=Adresse
linkedin=LinkedIn
portfolio=Portfolio
summary_objective=RÃƒÂ©sumÃƒÂ© / Objectif
education=ÃƒÂ‰ducation
work_experience=ExpÃƒÂ©rience Professionnelle
add_education=Ajouter ÃƒÂ‰ducation
add_experience=Ajouter ExpÃƒÂ©rience
project_name=Nom du Projet
project_description=Description du Projet
certificate_name=Nom du Certificat
institution=Institution
date_of_receipt=Date de RÃƒÂ©ception
language=Langue
proficiency_level=Niveau de CompÃƒÂ©tence
next=Suivant
auto_fill=autofill
==================================================

Fichier: src\main\java\com\example\stage\model\CVRecommendation.java
Chemin complet: C:\Users\Sh-Pc\Desktop\HomeFORNOW\KHEDMA\src\main\java\com\example\stage\model\CVRecommendation.java
-----
package com.example.stage.model;

import java.util.ArrayList;
import java.util.List;

public class CVRecommendation {/*
    private String profileName;
    private double matchScore;
    private List<String> matchedSkills;
    private List<String> missingSkills;
    private List<String> suggestions;
    private String detailedAnalysis;

    public CVRecommendation() {
        this.matchedSkills = new ArrayList<>();
        this.missingSkills = new ArrayList<>();
        this.suggestions = new ArrayList<>();
    }

    // Getters et Setters
    public String getProfileName() { return profileName; }
    public void setProfileName(String profileName) { this.profileName = profileName; }

    public double getMatchScore() { return matchScore; }
    public void setMatchScore(double matchScore) { this.matchScore = matchScore; }

    public List<String> getMatchedSkills() { return new ArrayList<>(matchedSkills); }
    public void setMatchedSkills(List<String> matchedSkills) {
        this.matchedSkills = new ArrayList<>(matchedSkills);
    }

    public List<String> getMissingSkills() { return new ArrayList<>(missingSkills); }
    public void setMissingSkills(List<String> missingSkills) {
        this.missingSkills = new ArrayList<>(missingSkills);
    }

    public List<String> getSuggestions() { return new ArrayList<>(suggestions); }
    public void setSuggestions(List<String> suggestions) {
        this.suggestions = new ArrayList<>(suggestions);
    }

    public String getDetailedAnalysis() { return detailedAnalysis; }
    public void setDetailedAnalysis(String detailedAnalysis) {
        this.detailedAnalysis = detailedAnalysis;
    }

    // MÃ©thodes utilitaires
    public void addMatchedSkill(String skill) {
        if (skill != null && !skill.trim().isEmpty()) {
            this.matchedSkills.add(skill.trim());
        }
    }

    public void addMissingSkill(String skill) {
        if (skill != null && !skill.trim().isEmpty()) {
            this.missingSkills.add(skill.trim());
        }
    }

    public void addSuggestion(String suggestion) {
        if (suggestion != null && !suggestion.trim().isEmpty()) {
            this.suggestions.add(suggestion.trim());
        }
    }*/
}
==================================================

